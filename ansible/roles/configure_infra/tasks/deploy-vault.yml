# Deploy vault using a helm chart
- name: Add HashiCorp Vault Helm repository
  community.kubernetes.helm_repository:
    name: hashicorp
    repo_url: https://helm.releases.hashicorp.com
    state: present
  when: install_vault | bool

- name: Install Helm chart from HashiCorp Vault repository
  community.kubernetes.helm:
    name: hashicorp-vault
    chart_ref: vault
    chart_repo_url: https://helm.releases.hashicorp.com
    release_namespace: hashicorp-vault
    create_namespace: true
    values: "{{ lookup('template', 'values.yaml') | from_yaml }}"
    state: present
  when: install_vault | bool

# create openshift route from template 
- name: Create openshift route from template 
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'vault-route.yaml') | from_yaml }}"
  when: install_vault | bool

# sleep for 25 seconds to allow vault pod to be created
- name: Sleep for 25 seconds to allow vault pod to be created
  pause:
    seconds: 25
  when: install_vault | bool

# Create golang-external-secrets namespace 
- name: Create golang-external-secrets namespace 
  community.kubernetes.k8s:
    state: present
    kind: Namespace
    name: golang-external-secrets
  when: install_vault | bool

- name: Generate and apply Kubernetes manifest using Helm
  kubernetes.core.helm_template:
    name: golang-external-secrets
    chart_ref: /home/lab-user/external-secrets-manager/openshift/apps/golang-external-secrets
    values: "{{ lookup('template', 'external-secrets-vaules.yaml') | from_yaml }}"
    release_namespace: golang-external-secrets
  register: helm_output
  when: install_vault | bool

# Set fact from helm output
- name: Set fact from helm output
  set_fact:
    use_helm_output: "{{ helm_output.stdout }}"
  when: install_vault | bool

# Saving the helm output to a file
- name: Saving the helm output to a file
  copy:
    content: "{{ use_helm_output }}"
    dest: /tmp/golang-external-secrets.yaml
  when: install_vault | bool

# when install_vault is true set fact to apply the manifest using oc command
- name: Set fact to apply the manifest using oc command
  set_fact:
    use_oc_command: "apply"
  when: install_vault | bool

# when install_vault is false set fact to apply the manifest using oc command
- name: Set fact to apply the manifest using oc command
  set_fact:
    use_oc_command: "delete"
  when: not install_vault | bool

- name: Apply Kubernetes manifest using oc command
  ansible.builtin.shell: "oc {{ use_oc_command }} -f  /tmp/golang-external-secrets.yaml"
  delegate_to: localhost
  become: false
  ignore_errors: true
  when: install_vault | bool

- name: Remove Helm chart from HashiCorp Vault repository
  community.kubernetes.helm:
    name: hashicorp-vault
    chart_ref: vault
    chart_repo_url: https://helm.releases.hashicorp.com
    release_namespace: hashicorp-vault
    create_namespace: true
    values:
      global:
        hubClusterDomain: "{{ hubClusterDomain }}"
    state: absent
  ignore_errors: yes
  when: not install_vault | bool

- name: Delete openshift route from template 
  community.kubernetes.k8s:
    state: absent
    definition: "{{ lookup('template', 'vault-route.yaml') | from_yaml }}"
  when: not install_vault | bool

# wait for vault pod to be deleted
- name: Wait for vault pod to be deleted
  community.kubernetes.k8s_info:
    kind: Pod
    api_version: v1
    namespace: hashicorp-vault
    label_selectors:
      - app.kubernetes.io/instance=hashicorp-vault
  register: vault_pod
  until: vault_pod.resources | length == 0
  retries: 30
  delay: 10
  when: not install_vault | bool

- name: Remove vault
  shell: |
    oc delete ClusterRoleBinding hashicorp-vault-server-binding
  ignore_errors: yes
  when: not install_vault | bool

# delete vault namespace
- name: Delete vault namespace
  community.kubernetes.k8s:
    state: absent
    kind: Namespace
    name: hashicorp-vault
  ignore_errors: yes
  when: not install_vault | bool

  # delete golang-external-secrets namespace
- name: Delete git namespace
  community.kubernetes.k8s:
    state: absent
    kind: Namespace
    name: golang-external-secrets
  ignore_errors: yes
  when: not install_vault | bool